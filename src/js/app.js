const columns = document.querySelectorAll(".list__tasks");
const btnAdd = document.querySelector(".btn-add");

const taskList = [];
let indexDnD;

const DnD = () => {
  const tasks = document.querySelectorAll(".task");
  let dragTask = null;
  for (let i = 0; i < tasks.length; i++) {
    tasks[i].draggable = true; // –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
    tasks[i].addEventListener("dragstart", () => {
      // –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
      const id = tasks[i].getAttribute("data-id");
      // console.log(id) –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—É—â–∏–π id
      indexDnD = taskList.findIndex((el) => {
        //{ text: textarea.value, id: Date.now(), status: status }
        return el.id == id;
      });
      dragTask = tasks[i];
      setTimeout(() => {
        tasks[i].style.display = "none";
      }, 0);
    });
    tasks[i].addEventListener("dragend", () => {
      // –∫–æ–Ω–µ—Ü –ø–µ—Ä–µ–Ω–æ—Å–∞
      // console.log(tasks[i]) —Ç–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞ —Å data-id
      // console.log(index);
      tasks[i].style.display = "block";
      tasks[i].style.backgroundColor = "yellow";
      dragTask = null;
    });
  }
  columns.forEach((column) => {
    column.addEventListener("dragover", (event) => {
      // –∫–æ–≥–¥–∞ –∫—É—Ä—Å–æ—Ä –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
      event.preventDefault();
      column.classList.add("dragover");
    });
    column.addEventListener("dragleave", () => {
      // –∫—É—Ä—Å–æ—Ä —É–≤–æ–¥–∏–º —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
      column.classList.remove("dragover");
    });
    column.addEventListener("drop", () => {
      // –∫–æ–≥–¥–∞ –∫–∞–∫–æ–π-—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –º—ã –æ—Ç–ø—É—Å–∫–∞–µ–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
      // console.log(column);
      let status;
      const id = column.getAttribute("data-id");
      if (id === "column-1") {
        status = "new";
      } else if (id === "column-2") {
        status = "progress";
      } else {
        status = "done";
      }
      // console.log(indexDnD);
      if (indexDnD || indexDnD === 0) {
        taskList[indexDnD].status = status; // status —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      }
      console.log(taskList, '—Å–æ–±—ã—Ç–∏–µ DROP');
      column.classList.remove("dragover");
      if (dragTask) {
        column.append(dragTask); // append –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω html —ç–ª–µ–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä—å –¥—Ä—É–≥–æ–≥–æ —Ç—ç–≥–∞
      }
    });
  });
  {
    /* <span class="priority-dot">üöÄ</span> */
  }
};

const html = `
    <div class="new__task">
    <div class="textarea__wrapper">
        <textarea placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É" id="textarea"></textarea>
        <div class="button-wrapper">
        <button class="btn-add">Add card</button>
        <button class="btn-close">&times</button>
        <span class="point">...</span>
        </div>
        </div>
      </div>`;

const allCards = document.querySelectorAll(".cards");
for (let cardsEl of allCards) {
  // function attachAddCard(cardsEl) {
  cardsEl.addEventListener("click", (e) => {
    const trigger = e.target.closest(".add-card");
    if (!trigger) return; // –∫–ª–∏–∫ –Ω–µ –ø–æ "+ Add another card"
    trigger.classList.add("hidden");

    trigger.insertAdjacentHTML("afterend", html);
    const parent = trigger.parentElement;
    // console.log(parent)
    const btnClose = parent.querySelector(".btn-close");
    // console.log(btnClose);
    btnClose.addEventListener("click", () => {
      // console.log("—Ä–∞–±–æ—Ç–∞–µ—Ç");
      const form = parent.querySelector(".new__task");
      // console.log(trigger, parent, form);
      form.classList.add("hidden");
      trigger.classList.remove("hidden");
    });
    const btnAdd = parent.querySelector(".btn-add");
    // console.log(btnAdd)
    const textarea = parent.querySelector("#textarea");
    const grandParent = parent.parentElement;
    // console.log(grandParent)
    const currentColumn = grandParent.querySelector(".list__tasks");
    let status;
    const id = currentColumn.getAttribute("data-id");
    if (id === "column-1") {
      status = "new";
    } else if (id === "column-2") {
      status = "progress";
    } else {
      status = "done";
    }
    // console.log(currentColumn.getAttribute('data-id'))
    btnAdd.addEventListener("click", () => {
      const newTask = { text: textarea.value, id: Date.now(), status: status };
      if (newTask.text === "") {
        alert(`–ó–∞–ø–æ–ª–Ω–∏ —Ç–µ–∫—Å—Ç`);
        return;
      }
      // console.log(newTask)
      taskList.push(newTask);
      textarea.value = ""; // –æ—á–∏—â–∞–µ–º textarea.value
      // console.log(taskList);
      // console.log(parent)
      randerTasks(currentColumn, status); // –ø–µ—Ä–µ–¥–∞—é
    });
  });
  // }
}

const randerTasks = function (column, status) {
  //–ø—Ä–∏–Ω–∏–º–∞—é
  // –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
  // console.log(status)
  column.innerHTML = "";
  const filterTasks = taskList.filter((el) => {
    return el.status === status;
  });
  for (let task of filterTasks) {
    // —Ç–æ–ª—å–∫–æ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –Ω—É–∂–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    const taskHtml = `
    <div class="task" data-id = ${task.id}>${task.text} 
    <button class="btn-delete">&times</button>
    <div class="btn-edit">&#9998</div>
    </div>`;
    // ${task.id}>${task.text}  –¥–æ–±–∏—Ä–∞–µ–º—Å—è –¥–æ —Å–≤–æ–π—Å—Ç–≤ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
    column.insertAdjacentHTML("beforeend", taskHtml);
  }
  deleteTask();
  DnD();
};

const deleteTask = () => {
  const btnsDelete = document.querySelectorAll(".btn-delete");
  for (let btn of btnsDelete) {
    const column = btn.parentElement.parentElement;
    let status;
    const idColumn = column.getAttribute("data-id");
    if (idColumn === "column-1") {
      status = "new";
    } else if (idColumn === "column-2") {
      status = "progress";
    } else {
      status = "done";
    }
    btn.addEventListener("click", () => {
      // console.log(btn.parentElement) // –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –≤ html —Ä–∞–∑–º–µ—Ç–∫–µ btn.parentElement
      const id = btn.parentElement.getAttribute("data-id");
      // console.log(id)
      const index = taskList.findIndex((el) => {
        return el.id == id;
      });
      console.log(index)
      taskList.splice(index, 1);
      console.log(taskList, '—É–¥–∞–ª–µ–Ω–∏–µ')
      // randerTasks(column, status);
      // console.log(taskList)
    });
  }
};
